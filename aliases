; To use these aliases, you must include this file in .gitconfig
; include this stanza in your .gitconfig, where `path/to/gitin2it/aliases` is the path to this file,
; relative to the location of your .gitconfig

; [include]
; path = path/to/gitin2it/aliases

[alias]

; when was a file added
added = log --diff-filter=A --

alias = config --get-regexp ^alias\\.
aliases = config --get-regexp ^alias\\.

; show the most recent common ancestor
; see also `diverged`
ancestor = ! "gitancestor() { git merge-base --fork-point $1 $2 }; gitancestor"

; list names of contributors
;   see committers, contributors
authors = ! "gitauthors() { git log --pretty='%an %ae%n%cn %ce' | sort | uniq; }; gitauthors"

; go back one commit
; SEE to, towards, next
back = ! "gitback() { git checkout HEAD~${1:-1} ; }; gitback"

; show all branches
branches = ! "gitbranches() { git branch -a | grep ${1:-''} ; }; gitbranches"

; set the description on the branch
branch-describe = branch --edit-description

; summarize unstaged changes
changed = diff --stat

; show only changes to existing files (not new, uncommitted files, nor unstaged deletions)
changes = diff --diff-filter=M

; delete all uncommitted changes and untracked files
; alias scrub
cleanse = ! "gitcleanse() { git reset --hard; git clean -f -f -d; }; gitcleanse"

; remove all unstaged changes
clear = reset --hard

; empty git's cache
clear-cache = rm -r --cached .

; show commits that are only in this branch, and not in the other
; git commits [branch-name]
commits = ! "gitcommits() { git cherry -v ${1:-main} | tac ; }; gitcommits"

; show unique committer usernames
;    see contributors, authors
committers = ! "gitcommitters() { git log --pretty='%an %ae%n%cn %ce' | sort | uniq; }; gitcommitters"

; show files in conflict
conflicts = diff --name-only --diff-filter=U

; abbreivation for `git branch --contains`
contains = branch --contains

; copy a file wholesale from another branch, without staging it
;   $ git copy <absolute-file-path> <branch>
;   see `take`
copy = ! "gitcopy() { git show $2:$1 > $1 ; }; gitcopy"

; show unique contributor usernames
;    see authors, committers
contributors = ! "gitcontributors() { git log --pretty='%an %ae%n%cn %ce' | sort | uniq; }; gitcontributors"

; show just the name of the current branch
current = rev-parse --abbrev-ref HEAD

; delete a branch on local and remote
;    `git cut BRANCH-NAME [REMOTE-NAME]`
cut = ! "gitcut() { git branch -d $1; git push ${2:-origin} --delete $1; }; gitcut"

; show dangling commits
; https://lukescott.co/2019/05/10/git-finding-lost-dangling-commits/
dangling = ! "gitdangling() { git fsck --lost-found | grep '^dangling commit' | sed 's/^dangling commit //g' | xargs git show -s --oneline; }; gitdangling"

; alias for checkout -p
; git discard [filename]
discard = ! "gitdiscard() { git checkout -p ${1}; }; gitdiscard"

; show the most recent common ancestor
; see also `ancestor`
diverged = ! "gitdiverged() { git merge-base --fork-point $1 $2 }; git diverged"

; commit file deletions not done by `git rm`.
; TODO: add specify filename feature
delete = ! "gitdelete() { git diff --diff-filter=D --name-only | xargs git rm; }; gitdelete"

; show the log of files deleted in this branch
deleted = ! "gitdeleted() { git log --diff-filter=D --summary; }; gitdeleted"

; set the description on the branch
describe-branch = branch --edit-description

; show the description of the current/specified branch
description = ! "gitdescription() { git config branch.${1:-$(git rev-parse --abbrev-ref HEAD)}.description ; }; gitdescription"

; syntax sugar and QoL for `git diff --stat`
; use `tput` to apply the approprate column size in a `diff --stat`
;   $ git diff-stat [branch]
diff-stat = ! "gitdiffstat() { git diff --stat=$(tput cols) $1 ; }; gitdiffstat"

; find a string
; https://stackoverflow.com/a/13878026
find = ! "gitfind() { git rev-list --all | xargs git grep $1 ; }; gitfind"

; find a file (or partial filename match) anywhere in the repo
; https://stackoverflow.com/a/37212743/151841
;    $ git find-file PATTERN
find-file = ! "gitfindfile() { for branch in $(git for-each-ref --format=\"%(refname)\" refs/heads); do if git ls-tree -r --name-only $branch | grep \"$1\" > /dev/null; then  echo \"${branch}:\"; git ls-tree -r --name-only $branch | nl -bn -w3 | grep \"$1\"; fi; done; }; gitfindfile"

; if you've added a tracked file to the .gitignore, it will still persist. This removes it.
forget = rm --cached

; show what files are ignored
ignored = ls-files --others --exclude-standard --ignored

; set the current repo to ignore filemode
ignore-filemode = config core.fileMode false

; in which commit was a file introduced
;  see `added`
introduced = log --diff-filter=A --

; commit only modifications, don't commit additions or deletions
keep = commit -a

; keep both
; https://stackoverflow.com/a/55187779/151841
keep-both = ! "gitkeepboth() { grep -v -e'^<<<<<<<' -e'^>>>>>>>' -e'=======' $1 > $1.tmp; mv $1.tmp $1; git add $1; }; gitkeepboth"

; show the latest commits
;   alias `newest`
latest = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

; show local branches
local = branch
locals = branch

; show the standard log, but only commits that are tagged
log-tags = ! "gittaglog() { git log --date-order --date=format:'%Y-%m-%d %H:%M:%S' --format='%C(yellow)%cd%Creset  %h  \"%d %s\"  %Cred%cn %Cgreen(%cr)' | grep tag ; }; gittaglog"

; use `tput` to apply the approprate column size in a `log --stat`
log-stat = ! "gitlogstat() { git log --stat=$(tput cols) $1 ; }; gitlogstat"

; show merged branches
merged = branch --merge

; show commits existing in another branch that are `missing` from this branch
missing = ! "gitmissing() { git branch --no-contains ${1:-main}; }; gitmissing"

; show diff(s) of modified files only (no untracked or deleted files)
modified = diff --diff-filter=M

; show only new (unstaged) files
new = ls-files --others --exclude-standard

; check out the next commit going towards a branch head
;    $ git checkout next main
; https://stackoverflow.com/a/14200660/151841
; SEE to, towards
; SEE back
next = ! "gitnext() { git checkout $( git rev-list --topo-order HEAD.."$1" | tail -n 1 ) ; }; gitnext"

; show local branches not tracking a remote
non-tracking = ! "gitnonntracking() { git branch -vv | cut -c 3- | awk '$3 !~/\\[/ { print $1 }' ; }; gitnonntracking"

; "obituary" -- in which commit was a file deleted
; git obit [filename]

; "obituaries"-- show log only of file delestions
obits = !"gitobits() { git log --diff-filter=D --summary; }; gitobits"

; show the log in oneline format
oneline = log --oneline

; show the state of the current git repo
state = ! "git rev-parse --show-toplevel; git remote -v; git branch; git status; git rev-parse HEAD;"

; `cherry-pick` is simply too much typing
pick = cherry-pick

; show the root directory of the repository
pwd = rev-parse --show-toplevel;

; show only remote branches
remote-branches = branch -r

; show all remote repos
remotes = remote -v

; restore a file whose deletion has been committed
;   $ git restore FILENAME
restore = !git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
revive = !git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
resurrect = !git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"

; delete a branch locally and remotely
;    $ git remove BRANCHNAME [remote]
remove = ! "gitremove() { git branch -D $1 && git push ${2:-origin} --delete $1 ; }; gitremove"

; rename a branch
;   $ git rename OLDNAME NEWNAME [remote]
; https://stackoverflow.com/a/30590238/151841
rename = ! "gitrename() { git branch -m $1 $2 && git push ${3:-origin} --delete $1 && git push ${3:-origin} $2 && git push ${3:-origin} -u $2; }; gitrename"

; commit with the default commit message
resolve = commit --file .git/MERGE_MSG

; show if branches are ahead or behind of remote
schedule = for-each-ref --format="%(refname:short) %(upstream:track)" refs/heads

; delete all uncommitted changes and untracked files
; alias cleanse
scrub = ! "gitscrub() { git reset --hard; git clean -f -f -d; }; gitscrub"

; search the repo for a string
; https://stackoverflow.com/a/13878026/151841
; https://stackoverflow.com/a/49243541/151841
search = ! "gitsearch() { git rev-list --all | xargs git grep $1; }; gitsearch"

; set the upstream repo {default `origin`} (useful when git tells you a long --set-upstream command)
; git set-upstream [remote|'origin']
set-upstream = ! "gitsetupstream() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git push ${1:-origin} $BRANCH; git branch --set-upstream-to=${1:-origin}/$BRANCH $BRANCH; }; gitsetupstream"

; show the filesystem size of the tracked objects in the repo
size = count-objects -vH

short-stat = status --short

; keep a file from changing, see `unskip`, `skipped`
skip = update-index --skip-worktree

; Show which worktrees are skipped. See `skip`, `unskip`
skipped = ! "gitskipped() { git ls-files -v | grep ^[sS] ; }; gitskipped"

; do a squash commit
squash = merge --squash

; stash all files, including untracked ones
; "How do I _stash untracked_ files?"
stash-untracked = stash --untracked --

; stash unstaged changes only (leave staged changes alone)
stash-unstaged = stash --keep-index -u

; list current stashes
stashes = stash list

; show files that are staged (added but not committed)
staged = diff --cached

; stop whatever stoppable process git is in the middle of (merge, bisect)
stop = ! "gitstop() { git bisect reset; git merge --abort; git rebase --abort}; gitstop"

; show all tags
; I made this is a bash function so that you can't accidentally set a tag with this
tags = ! "gittags() { git tag; }; gittags"

; copy a file wholesale form another branch, and stage it
;   see `copy`
take = ! "gittake() { git checkout $1 $2 ; }; gittake"

; show just the name of the current branch
this = rev-parse --abbrev-ref HEAD

; check out the next commit going towards a branch head
;    $ git to main
; https://stackoverflow.com/a/14200660/151841
; ALIASES next, towards
; SEE back
to = ! "gitto() { git checkout $( git rev-list --topo-order HEAD.."$1" | tail -n 1 ) ; }; gitto"

; check out the next commit going towards a branch head
;    $ git towards main
; https://stackoverflow.com/a/14200660/151841
; ALIASES next, to
; SEE back
towards = ! "gittowards() { git checkout $( git rev-list --topo-order HEAD.."$1" | tail -n 1 ) ; }; gittowards"

; show what files are being tracked
tracked = ! "gittracked() { git ls-tree -r $(git rev-parse --abbrev-ref HEAD) --name-only ; }; gittracked"

; show what remote(s) the current branch is tracking
tracking = rev-parse --abbrev-ref --symbolic-full-name @{u}

; restore deleted files if changes aren't staged
undelete = ! "gitundelete() { git status | grep 'deleted' | awk '{print $2}' | xargs git checkout -- ; }; gitundelete"

; show what files would be committed
uncommitted = ls-files --others --exclude-standard

; remove changes from staging area and reintroduce them as changes/diffs
uncommit = reset --soft HEAD^

; remove the lock file
unlock = ! "gitunlock() { rm -f ./.git/index.lock ; }; gitunlock"

; show branches unmerged into specified branch
; git unmerged [BRANCH|'main']
unmerged = ! "gitunmerged() { git branch --no-merged ${1:-main}; }; gitunmerged"

; tell git to start noticing changes to a file again. See `skip`, `skipped`
unskip = update-index --no-skip-worktree

; unstaged staged changes
unstage = reset

; show what files are not tracked
untracked = ls-files --others --exclude-standard --ignored

; delete new, untracked, uncommitted files
unwelcome = clean -f -d

; show all local branches with commits not pushed
unpushed = log --branches --not --remotes --no-walk --decorate

; show what files are tracked in the repos
versioned = ls-tree -r main --name-only

; add (`git add`) unstaged files
welcome = ! "gitaddnew() { git ls-files --others --exclude-standard | xargs git add ; }; gitaddnew"

; show username and email
whoami = ! "gitwhoami() { git config user.name; git config user.email; }; gitwhoami"


; word diff
word-diff  = diff --word-diff
wd = diff --word-diff
